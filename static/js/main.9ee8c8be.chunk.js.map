{"version":3,"sources":["logo.svg","App.tsx","utils.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","validationSchema","yup","text","required","min","max","initialValues","App","defaultItems","useState","items","setItems","onDelete","id","window","confirm","filteredItems","deleteById","data","result","i","length","children","newChildren","push","className","src","logo","alt","onSubmit","actions","setSubmitting","newItem","uid","validateOnChange","values","isSubmitting","handleChange","handleBlur","handleSubmit","TextField","name","value","onChange","placeholder","onBlur","Button","disabled","type","size","variant","color","data-testid","renderItem","item","fontSize","onClick","maxDepth","newState","defaultProps","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,4RC4BrCC,G,OAAmBC,IAAW,CAClCC,KAAMD,MAEHE,WACAC,IAAI,GACJC,IAAI,OAGHC,EAA0B,CAC9BJ,KAAM,YAGFK,EAAiB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACjBC,mBAAQ,OAASD,QAAT,IAASA,IAAgB,IADhB,mBACpCE,EADoC,KAC7BC,EAD6B,KAYrCC,EAAW,SAACC,GAEhB,GADwBC,OAAOC,QAAQ,iBAC3B,CACV,IAAMC,ECvDL,SAASC,EAAWC,EAAaL,GAGtC,IAFA,IAAIM,EAAS,GAELC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACnC,GAAIF,EAAKE,GAAGE,UAAYJ,EAAKE,GAAGE,SAASD,OAAQ,CAC/C,IAAME,EAAcN,EAAWC,EAAKE,GAAGE,SAAUT,GAC7CU,EAAYF,OACdH,EAAKE,GAAGE,SAAWC,SAEZL,EAAKE,GAAGE,SAGfJ,EAAKE,GAAGP,KAAOA,GACjBM,EAAOK,KAAKN,EAAKE,IAIrB,OAAOD,EDsC2BF,CAAWP,EAAOG,GAChDF,EAAQ,OAACK,QAAD,IAACA,IAAiB,MAe9B,OACE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mDAEF,0BAAMH,UAAU,WACd,yBAAKA,UAAU,QACb,kBAAC,IAAD,CACEnB,cAAeA,EACfuB,SAvCO,SAACX,EAAgBY,GAChCA,EAAQC,eAAc,GACtB,IAAMC,EAAgB,CACpBnB,GAAIoB,YAAIf,GACRhB,KAAMgB,EAAKhB,MAEbS,EAAS,GAAD,mBAAKD,GAAL,CAAYsB,KACpBd,EAAKhB,KAAO,GACZ4B,EAAQC,eAAc,IAgCdG,kBAAkB,EAClBlC,iBAAkBA,IAEjB,gBAAGmC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,aAAcC,EAAvC,EAAuCA,WAAYC,EAAnD,EAAmDA,aAAnD,OACC,0BAAMV,SAAUU,GACd,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,MAAOP,EAAOjC,KACdyC,SAAUN,EACVO,YAAY,eACZC,OAAQP,IACV,kBAACQ,EAAA,EAAD,CACEC,SAAUX,EACVY,KAAK,SACLC,KAAK,QACLC,QAAQ,YACRC,MAAM,UACNC,cAAY,gBANd,UAUA,6BACE,kBAAC,IAAD,CAAcX,KAAK,eAM7B,kBAAC,IAAD,CACE/B,MAAOA,EACP2C,WApDW,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,KACpB,OAAO,0BAAMF,cAAA,eAAqBE,EAAKzC,KACpCyC,EAAKpD,KACN,kBAAC,IAAD,CACEqD,SAAS,QACT9B,UAAU,aACV2B,cAAA,uBAA6BE,EAAKzC,IAClC2C,QAAS,kBAAM5C,EAAS0C,EAAKzC,SA8C3B4C,SAAU,EACVd,SAvDiB,SAACe,GAAD,OAAsB/C,EAAS+C,SA8D1DnD,EAAIoD,aAAe,CACjBnD,aAAc,CACZ,CACEK,GAAI,QACJX,KAAM,UAER,CACEW,GAAI,QACJX,KAAM,YAKGK,QE1HKqD,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ee8c8be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { FC, useState } from 'react';\nimport Nestable from 'react-nestable';\nimport { uid } from 'react-uid'\nimport { Formik, ErrorMessage  } from 'formik';\nimport * as yup from 'yup';\n\nimport { TextField, Button } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { deleteById } from './utils';\n\nimport logo from './logo.svg';\nimport './App.css';\n\ntype Props = {\n  defaultItems?: Item[];\n}\n\ntype Item = {\n  id: string;\n  text: string;\n  children?: Item[];\n}\n\ntype FormData = {\n  text: string;\n}\n\nconst validationSchema = yup.object({\n  text: yup\n    .string()\n    .required()\n    .min(4)\n    .max(50)\n});\n\nconst initialValues: FormData = {\n  text: 'New item'\n}\n\nconst App: FC<Props> = ({ defaultItems }) => {\n  const [items, setItems] = useState<Item[]>(defaultItems ?? []);\n  const onSubmit = (data: FormData, actions: { setSubmitting: (state: boolean) => void }) => {\n    actions.setSubmitting(true)\n    const newItem: Item = {\n      id: uid(data),\n      text: data.text\n    }\n    setItems([...items, newItem]);\n    data.text = '';\n    actions.setSubmitting(false);\n  }\n  const onDelete = (id: string): void => {\n    const isSure: boolean = window.confirm('Are you sure?');\n    if (isSure) {\n      const filteredItems: Item[] = deleteById(items, id)\n      setItems(filteredItems ?? []);\n    }\n  }\n  const onNestableChange = (newState: Item[]) => setItems(newState); // keep state in sync with changes from nestable\n  const renderItem = ({ item }: { item: { id: string, text: string, children: [] }}): any => {\n    return <span data-testid={`item-${item.id}`}>\n      {item.text}\n      <DeleteIcon\n        fontSize=\"small\"\n        className=\"DeleteIcon\"\n        data-testid={`deleteButton-${item.id}`}\n        onClick={() => onDelete(item.id)} />\n    </span>\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>React Nestable demo</p>\n      </header>\n      <main className=\"Content\">\n        <div className=\"Form\">\n          <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validateOnChange={false}\n            validationSchema={validationSchema}\n          >\n            {({ values, isSubmitting, handleChange, handleBlur, handleSubmit }) => (\n              <form onSubmit={handleSubmit}>\n                <TextField\n                  name=\"text\"\n                  value={values.text}\n                  onChange={handleChange}\n                  placeholder=\"Add new item\"\n                  onBlur={handleBlur}  />\n                <Button\n                  disabled={isSubmitting}\n                  type=\"submit\"\n                  size=\"small\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  data-testid=\"submitButton\"\n                >\n                  Submit\n                </Button>\n                <div>\n                  <ErrorMessage name=\"text\" />\n                </div>\n              </form>\n            )}\n          </Formik>\n        </div>\n        <Nestable\n          items={items}\n          renderItem={renderItem}\n          maxDepth={3}\n          onChange={onNestableChange}\n        />\n      </main>\n    </div>\n  );\n}\n\nApp.defaultProps = {\n  defaultItems: [\n    {\n      id: 'uid-1',\n      text: 'Item 1'\n    },\n    {\n      id: 'uid-2',\n      text: 'Item 2'\n    },\n  ]\n} as Partial<Props>;\n\nexport default App;\n","export function deleteById(data: any[], id: string) {\n  let result = [];\n\n  for(let i = 0; i < data.length; i++) {\n    if (data[i].children && data[i].children.length) {\n      const newChildren = deleteById(data[i].children, id);\n      if (newChildren.length) {\n        data[i].children = newChildren;\n      } else {\n        delete data[i].children;\n      }\n    }\n    if (data[i].id !== id) {\n      result.push(data[i]);\n    }\n  }\n\n  return result;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}